#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children false
\language brazilian
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
deixar apenas o que for pertinente ao módulo experimental a ser desenvolvido.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste capítulo do projeto de engenharia veremos questões associadas ao projeto
 do sistema, incluindo protocolos, recursos, plataformas suportadas, implicações
 nos diagramas feitos anteriormente, diagramas de componentes e implantação.
 
\end_layout

\begin_layout Section
Projeto do sistema
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
Depois da análise orientada a objeto desenvolve-se o projeto do sistema,
 qual envolve etapas como a definição dos protocolos, da interface API,
 o uso de recursos, a subdivisão do sistema em subsistemas, a alocação dos
 subsistemas ao hardware e a seleção das estruturas de controle, a seleção
 das plataformas do sistema, das bibliotecas externas, dos padrões de projeto,
 além da tomada de decisões conceituais e políticas que formam a infraestrutura
 do projeto.
\end_layout

\begin_layout Standard
Deve-se definir padrões de documentação, padrões para o nome das classes,
 padrões de retorno e de parâmetros em métodos, características da interface
 do usuário e características de desempenho.
 
\end_layout

\begin_layout Standard
O projeto do sistema é a estratégia de alto nível para resolver o problema
 e elaborar uma solução.
 
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto o software irá se comunicar com o componente externo Gnuplot,
 que gerará os gráficos escolhidos pelo usuário.
\end_layout

\begin_layout Itemize
Será efetuada a entrada de dados via arquivo de texto, formato ascii, com
 a extensão .dat.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O presente programa utilizará o HD, o processador, o teclado, a memória,
 a tela e os demais componentes internos do computador
\end_layout

\begin_layout Itemize
Será utlizado também um arquivo de dados no formato ascii com as informações
 do fluido do reservatório.
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A linguagem usada para o programa será C++, portanto este será multiplataforma,
 podendo ser executado no Windows, Mac OS X e GNU/Linux.
 
\end_layout

\begin_layout Itemize
O software utilizará a biblioteca externa CGnuplot que permitirá o acesso
 ao programa Gnuplot.
 Uma cópia dos arquivos .h e .cpp está disponibilizada.
\end_layout

\begin_layout Itemize
O ambiente para montar a interface de desenvolvimento – IDE será o CodeBlocks
 (Windows) e o Xcode (Mac OS X).
 O compilador gcc/g++ do Gnu.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
se um item não for pertinente; pode ser retirado; ,mas somente na versão
 final; isto facilita o trabalho de revisão do trabalho!!
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Projeto orientado a objeto – POO
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise, mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida
 (hardware, sistema operacional e linguagem de softwareção).
 Passa pelo maior detalhamento do funcionamento do software, acrescentando
 atributos e métodos que envolvem a solução de problemas específicos não
 identificados durante a análise.
\end_layout

\begin_layout Standard
Envolve a otimização da estrutura de dados e dos algoritmos, a minimização
 do tempo de execução, de memória e de custos.
 Existe um desvio de ênfase para os conceitos da plataforma selecionada.
 
\end_layout

\begin_layout Standard
Por exemplo, na análise define-se que existe um método para salvar um arquivo
 em disco, define um atributo nomeDoArquivo, mas não se preocupa com detalhes
 específicos da linguagem.
 Já no projeto, inclui-se as bibliotecas necessárias para acesso ao disco,
 cria-se um objeto específico para acessar o disco, podendo, portanto, acrescent
ar novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Aqui são estabelecidos as dependências e restrições do programa de parâmetros
 de fluidos do reservatório.
 
\end_layout

\begin_deeper
\begin_layout Itemize
O programa utiliza o HD, o processador e o teclado do computador;
\end_layout

\begin_layout Itemize
O Software pode ser executado nas plataformas GNU/Linux ou Windows;
\end_layout

\begin_layout Itemize
No Sistema Operacional Windows e GNU/Linux, existe a necessidade de instalação
 do software Gnuplot para o funcionamento do programa;
\end_layout

\begin_layout Itemize
O código possui comentários com explicações dos algoritmos a serem executados;
\end_layout

\end_deeper
\begin_layout Itemize
Adicionar nos diagramas de pacotes as bibliotecas e subsistemas selecionados
 no projeto do sistema (exemplo: a biblioteca gráfica selecionada).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Foi utlizada como biblioteca gráfica CGnuplot, para tanto foi necessária
 a instalação do software GNUPLOT para plotagem dos gráficos gerados;
\end_layout

\end_deeper
\begin_layout Itemize
Novas classes e associações oriundas das bibliotecas selecionadas e da linguagem
 escolhida devem ser acrescentadas ao modelo.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto foi feita uma associação entre a biblioteca CGnuplot com as
 classes CRazaoSolubilidade, CCompresOleo, CFatorVolumeFormacaoOleo, CFatorZ,
 CFatorVolumeFormacaoGas para a geração dos gráficos.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Revisar os diagramas de sequência e de comunicação considerando a plataforma
 escolhida.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Não foi realizada nessa etapa do projeto uma vez que os diagramas de sequência
 e de comunicação serão modificados durante o desenvolvimento do código.
\end_layout

\end_deeper
\begin_layout Itemize
Verificar a necessidade de se revisar, ampliar e adicionar novos diagramas
 de máquinas de estado e de atividades.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Não foi realizada nessa etapa do projeto uma vez que os diagramas de máquinas
 de estado e de atividades serão modificados durante o desenvolvimento do
 código caso seja necessário.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Atributos novos podem ser adicionados a uma classe, como, por exemplo, atributos
 específicos de uma determinada linguagem de softwareção (acesso a disco,
 ponteiros, constantes e informações correlacionadas).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Como alguns atributos estavam presentes na maioria dos cálculos das correlações
 de Vasquez e Beggs, por conta disso eles foram retirados das classes de
 cálculo e implementados externamente na classe C3Parametros.
\end_layout

\begin_layout Itemize
Os atributos in e fin foram criados a fim de possibilitar a leitura dos
 dados necessários aos cálculos nas classes de correlações a partir da classe
 CFluidoBlackOil.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Em função da plataforma escolhida, verifique as possíveis alterações nos
 métodos.
 O projeto do sistema costuma afetar os métodos de acesso aos diversos dispositi
vos (exemplo: hd, rede).
\end_layout

\begin_deeper
\begin_layout Itemize
Em virtude de usar leitura de disco, um método de inserção de dados através
 do teclado foi adicionado a fim de que o usuário possa digitar os dados
 desejados e não ficar preso somente a leitura do disco.
\end_layout

\end_deeper
\begin_layout Itemize
Revise os diagramas de classes, de seqüência e de máquina de estado.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
O diagrama de classes foi reformulado uma vez que houve subdivisões de classes
 já existentes e criação de novas classes.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Reorganização das classes e dos métodos (criar métodos genéricos com parâmetros
 que nem sempre são necessários e englobam métodos existentes).
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Inicialmente alguns métodos haviam sido pensados como podendo ser uma classe,
 mas foram distribuidos tanto na classe base quanto nas derivadas para diminuiçã
o do número total de classes.
\end_layout

\end_deeper
\begin_layout Itemize
Revise as heranças no diagrama de classes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Algumas heranças puderam ser excluidas do diagrama, uma vez que alguns atributos
 necessários inicialmente puderam ser passados através da chamada das funções.
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Algumas heranças foram trocadas por associações e novas associações foram
 criadas para relacionamento com novas classes.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A ordem de execução pode ser alterada.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Inicialmente pensou-se em solicitar ao usuário que informasse primeiramente
 qual parâmetro seria calculado, logo após a correlação que se deseja utilizar
 para então definir qual tipo de entrada de dados seria feita, porém para
 o caso de ele selecionar outros tipos de parâmetros para cálculo posterior,
 que necessitassem de propriedades dos fluidos ainda não informadas, novamente
 teria que haver entrada de dados no programa.
 Dessa forma, inverteu-se a ordem e o primeiro quesito a ser preenchido
 pelo usuário refere-se ao carregamento dos dados, que podem ser feitos
 tanto pelo teclado ou por leitura do disco.
\end_layout

\end_deeper
\begin_layout Itemize
Revise as associações nos diagramas de classes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A classe CSimuladorBlackOil não precisa mais ter associação com a classe
 CGnuplot uma vez que as classes que realizarão as plotagens não são mais
 herdeiras do simulador.
 Elas são as que calculam e geram os gráficos a partir dos resultados.
\end_layout

\begin_layout Itemize
A classe CFluidoBlackOil foi criada a fim de conter todas as informações
 necessárias referentes ao fluido em questão, possuindo métodos de entrada
 de dados pelo teclado e leitura do disco.
\end_layout

\begin_layout Itemize
A classe C3Parametros foi criada a fim de reunir alguns atributos que estavam
 presentes na maioria dos cálculos das correlações de Vasquez e Beggs, por
 conta disso eles foram retirados das classes de cálculo e implementados
 externamente.
\end_layout

\end_deeper
\begin_layout Standard
As dependências dos arquivos e bibliotecas podem ser descritos pelo diagrama
 de componentes, e as relações e dependências entre o sistema e o hardware
 podem ser ilustradas com o diagrama de implantação.
 Veja na Figura 
\color red
4.1**** 
\color inherit
do diagrama de classes
\end_layout

\begin_layout Section
Diagrama de componentes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de componentes mostra a forma como os componentes do software
 se relacionam, suas dependências.
 Inclui itens como: componentes, subsistemas, executáveis, nós, associações,
 dependências, generalizações, restrições e notas.
 Exemplos de componentes são bibliotecas estáticas, bibliotecas dinâmicas,
 dlls, componentes Java, executáveis, arquivos de disco, código-fonte.
 
\end_layout

\begin_layout Standard
Na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-componentes"

\end_inset

 temos o diagrama de componentes, a geração de objetos depende dos arquivos
 de extensão .h e .cpp.
 O subsistema banco de dados representa o arquivo com os dados do reservatório.
 O programa executável a ser gerado depende das bibliotecas, dos arquivos
 .h e .cpp e dos arquivos de entrada.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Na versão final apagar este texto copiado do livro; e colocado aqui para
 lhe auxiliar; deixar somente o que é pertinente ao trabalho
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Bosco Maciel/Downloads/Modelo - Copy/ModeloDocumento-ProjetoEngenharia-ProgramacaoPratica-master/imagens/Fig5.1-DiagramadeComponentes.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Diagrama de implantação
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de implantação é um diagrama de alto nível que inclui relações
 entre o sistema e o hardware e que se preocupa com os aspectos da arquitetura
 computacional escolhida.
 Seu enfoque é o hardware, a configuração dos nós em tempo de execução.
 
\end_layout

\begin_layout Standard
O diagrama de implantação deve incluir os elementos necessários para que
 o sistema seja colocado em funcionamento: computador, periféricos, processadore
s, dispositivos, nós, relacionamentos de dependência, associação, componentes,
 subsistemas, restrições e notas.
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-implantação."

\end_inset

 o diagrama de implantação.
 Foram obtidos dados dos parâmetros de poço através de testes de pressão,
 testes em amostras e testes em células pvt, os quais foram salvos em arquivos
 com extensao .dat no computador.
 O programa importa estes arquivos e utiliza o teclado e monitor para a
 comunicação com o usuário.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Bosco Maciel/Downloads/Modelo - Copy/ModeloDocumento-ProjetoEngenharia-ProgramacaoPratica-master/imagens/Fig5.2-DigramadeImplantacao.png
	lyxscale 90
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
